/* 
*   NatCorder
*   Copyright (c) 2019 Yusuf Olokoba
*/

namespace NatCorder.Clocks {

    using System.Runtime.CompilerServices;
    using Internal;

    /// <summary>
    /// Clock that produces timestamps spaced at a fixed interval.
    /// This clock is useful for enforcing a fixed framerate in a recording.
    /// </summary>
    [Doc(@"FixedIntervalClock")]
    public class FixedIntervalClock : IClock {

        /// <summary>
        /// Interval between consecutive timestamps generated by the clock in seconds.
        /// </summary>
        [Doc(@"FixedIntervalClockInterval")]
        public double Interval { get; set; }

        /// <summary>
        /// Current timestamp in nanoseconds.
        /// The very first value reported by this property will always be zero.
        /// </summary>
        [Doc(@"Timestamp")]
        public long Timestamp {
            [MethodImpl(MethodImplOptions.Synchronized)] get;
            private set; // Implicitly synchronized
        }
        
        /// <summary>
        /// Create a fixed interval clock
        /// </summary>
        /// <param name="interval">Interval between consecutive timestamps in seconds</param>
        [Doc(@"FixedIntervalClockCtorInterval")]
        public FixedIntervalClock (double interval) {
            Interval = interval;
            Timestamp = 0L;
        }

        /// <summary>
        /// Create a fixed interval clock for a given framerate
        /// </summary>
        /// <param name="framerate">Desired framerate for clock's timestamps</param>
        [Doc(@"FixedIntervalClockCtorFramerate")]
        public FixedIntervalClock (int framerate) : this(1.0 / framerate) {}

        /// <summary>
        /// Advance the clock by its time interval.
        /// </summary>
        [MethodImpl(MethodImplOptions.Synchronized), Doc(@"FixedIntervalClockTick")]
        public void Tick () {
            Timestamp += (long)(Interval * 1e+9);
        }
    }
}